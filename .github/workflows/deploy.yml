# 워크플로우의 이름입니다. GitHub Actions 탭에 이 이름이 표시됩니다.
name: Deploy via SSH (optional)

# 워크플로우를 언제 실행할지 정의하는 트리거(Trigger) 설정입니다.
on:
  # 'workflow_dispatch'는 GitHub UI에서 "Run workflow" 버튼을 눌러 수동으로 워크플로우를 실행할 수 있게 합니다.
  workflow_dispatch:
    # 수동 실행 시 사용자로부터 받을 입력 값들을 정의합니다.
    inputs:
      # SSH 접속 대상 서버의 IP 주소 또는 도메인을 입력받습니다.
      host:
        description: 'SSH host (e.g. 1.2.3.4)'
        required: true # 필수 입력 항목임을 의미합니다.
      # SSH 접속에 사용할 사용자 이름을 입력받습니다.
      user:
        description: 'SSH user'
        required: true
      # 배포할 애플리케이션이 위치할 원격 서버의 디렉토리 경로를 입력받습니다.
      app_dir:
        description: 'Remote app directory'
        required: true
      # 원격 서버에 배포될 최종 JAR 파일의 이름을 지정합니다. (예: app.jar)
      jar_name:
        description: 'Jar filename on remote (e.g. app.jar)'
        required: true

# 워크플로우가 실행할 실제 작업(들)을 정의합니다.
jobs:
  # 'deploy'라는 이름의 작업을 생성합니다.
  deploy:
    # 이 작업이 실행될 가상 환경을 지정합니다. 'ubuntu-latest'는 최신 버전의 우분투 리눅스입니다.
    runs-on: ubuntu-latest
    # 'deploy' 작업이 수행할 구체적인 단계들을 순서대로 나열합니다.
    steps:
      # 1. 레포지토리의 소스 코드를 가상 환경으로 내려받습니다. (체크아웃)
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Java 프로젝트를 빌드하기 위해 JDK(Java Development Kit) 21 버전을 설치하고 설정합니다.
      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3. Gradle을 사용하여 Java 프로젝트를 빌드합니다.
      - name: Build JAR (no tests)
        run: |
          # gradlew 스크립트에 실행 권한을 부여합니다.
          chmod +x gradlew
          # 'bootJar' 명령으로 실행 가능한 JAR 파일을 생성하고, '-x test' 옵션으로 테스트는 건너뛰어 빌드 시간을 단축합니다.
          ./gradlew bootJar -x test

      # 4. 빌드된 JAR 파일을 SCP(Secure Copy)를 통해 원격 서버로 전송합니다.
      - name: Upload JAR to server
        uses: appleboy/scp-action@v0.1.7
        with:
          # 워크플로우 실행 시 입력받은 서버 주소와 사용자 이름을 사용합니다.
          host: ${{ github.event.inputs.host }}
          username: ${{ github.event.inputs.user }}
          # SSH 접속에 사용할 비공개 키입니다. GitHub Secrets에 'SSH_PRIVATE_KEY'라는 이름으로 저장해야 합니다.
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # 전송할 파일의 경로입니다. 빌드 결과물인 JAR 파일을 가리킵니다.
          source: "build/libs/*.jar"
          # 파일이 저장될 원격 서버의 목적지 디렉토리입니다.
          target: ${{ github.event.inputs.app_dir }}

      # 5. 원격 서버에 SSH로 접속하여 배포 스크립트를 실행합니다.
      - name: Restart service on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.event.inputs.host }}
          username: ${{ github.event.inputs.user }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # 원격 서버에서 실행할 셸 스크립트 내용입니다.
          script: |
            # 스크립트 실행 중 오류가 발생하면 즉시 중단합니다.
            set -e
            # 'scp'로 파일이 업로드된 애플리케이션 디렉토리로 이동합니다.
            cd ${{ github.event.inputs.app_dir }}
            
            # ⚠️ 주의: 아래 두 줄은 의도와 다를 수 있습니다.
            # 'scp-action'은 source의 파일을 target 디렉토리 '안으로' 복사하므로, 
            # 'build/libs' 디렉토리는 원격 서버의 app_dir에 존재하지 않을 가능성이 높습니다.
            ls -l build/libs || true
            # 따라서 아래 명령은 'ls -t *.jar | head -n 1'이 더 정확할 수 있습니다.
            NEW_JAR=$(ls -t build/libs/*.jar | head -n 1)
            
            # 어떤 JAR 파일을 배포에 사용할지 로그로 출력합니다.
            echo "Using $NEW_JAR"
            
            # 릴리스 보관용 'releases' 디렉토리를 생성합니다. (이미 있어도 오류 없음)
            mkdir -p releases
            
            # 새로 받은 JAR 파일을 'releases' 폴더에 복사하고, 입력받은 'jar_name'으로 이름을 변경합니다.
            cp "$NEW_JAR" releases/${{ github.event.inputs.jar_name }}
            
            # systemd 서비스 설정을 리로드합니다. 서비스 파일 변경 시 필요할 수 있습니다.
            # '|| true'는 이 명령이 실패해도 전체 워크플로우가 실패하지 않도록 합니다.
            sudo systemctl daemon-reload || true
            
            # 'sejong-jokbo'라는 이름의 systemd 서비스를 재시작하여 새 버전의 애플리케이션을 구동합니다.
            # SSH로 접속한 유저는 'sudo' 명령을 비밀번호 없이 실행할 수 있는 권한이 필요합니다.
            sudo systemctl restart sejong-jokbo || true